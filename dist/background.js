class i{constructor(){this.setupEventListeners()}setupEventListeners(){chrome.runtime.onInstalled.addListener(e=>{e.reason==="install"?this.handleFirstInstall():e.reason==="update"&&this.handleUpdate()}),chrome.runtime.onMessage.addListener((e,r,t)=>(this.handleMessage(e,r,t),!0)),chrome.action.onClicked.addListener(e=>{this.handleActionClick(e)})}async handleFirstInstall(){console.log("Extensão instalada pela primeira vez");try{await chrome.sidePanel.open({windowId:(await chrome.windows.getCurrent()).id})}catch(e){console.error("Erro ao abrir side panel:",e),await chrome.tabs.create({url:chrome.runtime.getURL("options.html")})}}async handleUpdate(){console.log("Extensão atualizada");try{(await chrome.storage.sync.get("userSettings")).userSettings&&console.log("Configurações existentes encontradas")}catch(e){console.error("Erro ao verificar configurações:",e)}}async handleMessage(e,r,t){try{switch(e.type){case"GET_ACTIVE_TAB":const a=await chrome.tabs.query({active:!0,currentWindow:!0});t({tab:a[0]});break;case"EXECUTE_ON_TAB":await this.executeOnTab(e.tabId,e.action),t({success:!0});break;case"CHECK_PERMISSIONS":const s=await this.checkPermissions(e.permissions);t({hasPermissions:s});break;case"GET_MODELS":const o=await this.getAvailableModels(e.provider,e.apiKey);t({models:o});break;default:t({error:"Tipo de mensagem não reconhecido"})}}catch(a){console.error("Erro ao processar mensagem:",a),t({error:a.message})}}async handleActionClick(e){try{await chrome.sidePanel.open({windowId:e.windowId})}catch(r){console.error("Erro ao abrir side panel:",r);try{const a=(await chrome.storage.sync.get("userSettings")).userSettings;a!=null&&a.isConfigured||await chrome.tabs.create({url:chrome.runtime.getURL("options.html")})}catch(t){console.error("Erro ao verificar configurações:",t)}}}async executeOnTab(e,r){try{await chrome.tabs.sendMessage(e,{type:"EXECUTE_STEP",step:r})}catch(t){throw console.error("Erro ao executar ação na aba:",t),t}}async checkPermissions(e){try{return await chrome.permissions.contains({permissions:e})}catch(r){return console.error("Erro ao verificar permissões:",r),!1}}async getAvailableModels(e,r){try{switch(e){case"openai":return await this.getOpenAIModels(r);case"gemini":return await this.getGeminiModels(r);case"ollama":return await this.getOllamaModels(r);default:return this.getDefaultModels(e)}}catch(t){return console.error("Erro ao buscar modelos:",t),this.getDefaultModels(e)}}async getOpenAIModels(e){try{const r=await fetch("https://api.openai.com/v1/models",{headers:{Authorization:`Bearer ${e}`,"Content-Type":"application/json"}});if(!r.ok)throw new Error(`Erro na API OpenAI: ${r.statusText}`);return(await r.json()).data.filter(a=>a.id.includes("gpt")).map(a=>a.id).sort()}catch(r){return console.error("Erro ao buscar modelos OpenAI:",r),this.getDefaultModels("openai")}}async getGeminiModels(e){try{const r=await fetch(`https://generativelanguage.googleapis.com/v1beta/models?key=${e}`);if(!r.ok)throw new Error(`Erro na API Gemini: ${r.statusText}`);return(await r.json()).models.filter(a=>a.name.includes("gemini")).map(a=>a.name.split("/").pop()).sort()}catch(r){return console.error("Erro ao buscar modelos Gemini:",r),this.getDefaultModels("gemini")}}async getOllamaModels(e){try{const r=await fetch(`${e}/api/tags`);if(!r.ok)throw new Error(`Erro no Ollama: ${r.statusText}`);return(await r.json()).models.map(a=>a.name).sort()}catch(r){return console.error("Erro ao buscar modelos Ollama:",r),this.getDefaultModels("ollama")}}getDefaultModels(e){switch(e){case"openai":return["gpt-3.5-turbo","gpt-4","gpt-4-turbo-preview"];case"gemini":return["gemini-pro","gemini-pro-vision"];case"ollama":return["llama2","codellama","mistral"];default:return[]}}async cleanupOldData(){try{const e=await chrome.storage.local.get(),t=Date.now()-7*24*60*60*1e3,a=[];Object.entries(e).forEach(([s,o])=>{typeof o=="object"&&o.timestamp&&o.timestamp<t&&a.push(s)}),a.length>0&&(await chrome.storage.local.remove(a),console.log(`Limpeza concluída: ${a.length} itens removidos`))}catch(e){console.error("Erro na limpeza de dados:",e)}}}const c=new i;chrome.alarms.create("cleanup",{periodInMinutes:24*60});chrome.alarms.onAlarm.addListener(n=>{n.name==="cleanup"&&c.cleanupOldData()});
