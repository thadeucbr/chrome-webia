console.log("Background script iniciado");class c{constructor(){console.log("BackgroundService inicializado"),this.setupEventListeners()}setupEventListeners(){console.log("Configurando event listeners"),chrome.runtime.onInstalled.addListener(e=>{console.log("onInstalled triggered:",e.reason),e.reason==="install"?this.handleFirstInstall():e.reason==="update"&&this.handleUpdate()}),chrome.runtime.onMessage.addListener((e,o,a)=>(console.log("Mensagem recebida:",e.type),this.handleMessage(e,o,a),!0)),chrome.action.onClicked.addListener(e=>{console.log("Clique na extensão detectado, tab:",e.id),this.handleActionClick(e)})}async handleFirstInstall(){console.log("Extensão instalada pela primeira vez");try{const e=await chrome.windows.getCurrent();console.log("Janela atual:",e.id),await chrome.sidePanel.open({windowId:e.id}),console.log("Side panel aberto com sucesso")}catch(e){console.error("Erro ao abrir side panel:",e),await chrome.tabs.create({url:chrome.runtime.getURL("options.html")}),console.log("Página de opções aberta como fallback")}}async handleUpdate(){console.log("Extensão atualizada");try{(await chrome.storage.sync.get("userSettings")).userSettings&&console.log("Configurações existentes encontradas")}catch(e){console.error("Erro ao verificar configurações:",e)}}async handleActionClick(e){console.log("Processando clique na extensão");try{if(e.windowId)console.log("Abrindo side panel na janela:",e.windowId),await chrome.sidePanel.open({windowId:e.windowId}),console.log("Side panel aberto com sucesso");else{const o=await chrome.windows.getCurrent();console.log("Usando janela atual:",o.id),await chrome.sidePanel.open({windowId:o.id}),console.log("Side panel aberto na janela atual")}}catch(o){console.error("Erro ao abrir side panel:",o);try{(await chrome.storage.sync.get("userSettings")).userSettings?.isConfigured?(console.error("Side panel não disponível. Verifique se o Chrome suporta side panels."),await chrome.tabs.create({url:chrome.runtime.getURL("options.html")})):(await chrome.tabs.create({url:chrome.runtime.getURL("options.html")}),console.log("Página de opções aberta como fallback"))}catch(a){console.error("Erro ao verificar configurações:",a),await chrome.tabs.create({url:chrome.runtime.getURL("options.html")})}}}async handleMessage(e,o,a){try{switch(console.log("Processando mensagem:",e.type),e.type){case"GET_ACTIVE_TAB":const r=await chrome.tabs.query({active:!0,currentWindow:!0});a({tab:r[0]});break;case"EXECUTE_ON_TAB":await this.executeOnTab(e.tabId,e.action),a({success:!0});break;case"CHECK_PERMISSIONS":const t=await this.checkPermissions(e.permissions);a({hasPermissions:t});break;case"GET_MODELS":const n=await this.getAvailableModels(e.provider,e.apiKey);a({models:n});break;default:console.warn("Tipo de mensagem não reconhecido:",e.type),a({error:"Tipo de mensagem não reconhecido"})}}catch(r){console.error("Erro ao processar mensagem:",r),a({error:r.message})}}async executeOnTab(e,o){try{await chrome.tabs.sendMessage(e,{type:"EXECUTE_STEP",step:o})}catch(a){throw console.error("Erro ao executar ação na aba:",a),a}}async checkPermissions(e){try{return await chrome.permissions.contains({permissions:e})}catch(o){return console.error("Erro ao verificar permissões:",o),!1}}async getAvailableModels(e,o){console.log("Buscando modelos para:",e);try{switch(e){case"openai":return await this.getOpenAIModels(o);case"gemini":return await this.getGeminiModels(o);case"ollama":return await this.getOllamaModels(o);default:return this.getDefaultModels(e)}}catch(a){return console.error("Erro ao buscar modelos:",a),this.getDefaultModels(e)}}async getOpenAIModels(e){try{console.log("Buscando modelos OpenAI...");const o=await fetch("https://api.openai.com/v1/models",{headers:{Authorization:`Bearer ${e}`,"Content-Type":"application/json"}});if(!o.ok)throw new Error(`Erro na API OpenAI: ${o.statusText}`);const r=(await o.json()).data.filter(t=>t.id.includes("gpt")).map(t=>t.id).sort();return console.log("Modelos OpenAI encontrados:",r.length),r}catch(o){return console.error("Erro ao buscar modelos OpenAI:",o),this.getDefaultModels("openai")}}async getGeminiModels(e){try{console.log("Buscando modelos Gemini...");const o=await fetch(`https://generativelanguage.googleapis.com/v1beta/models?key=${e}`);if(!o.ok)throw new Error(`Erro na API Gemini: ${o.statusText}`);const r=(await o.json()).models.filter(t=>t.name.includes("gemini")).map(t=>t.name.split("/").pop()).sort();return console.log("Modelos Gemini encontrados:",r.length),r}catch(o){return console.error("Erro ao buscar modelos Gemini:",o),this.getDefaultModels("gemini")}}async getOllamaModels(e){try{console.log("Buscando modelos Ollama...");const o=await fetch(`${e}/api/tags`);if(!o.ok)throw new Error(`Erro no Ollama: ${o.statusText}`);const r=(await o.json()).models.map(t=>t.name).sort();return console.log("Modelos Ollama encontrados:",r.length),r}catch(o){return console.error("Erro ao buscar modelos Ollama:",o),this.getDefaultModels("ollama")}}getDefaultModels(e){return{openai:["gpt-3.5-turbo","gpt-4","gpt-4-turbo-preview"],gemini:["gemini-pro","gemini-pro-vision"],ollama:["llama2","codellama","mistral"]}[e]||[]}async cleanupOldData(){try{const e=await chrome.storage.local.get(),a=Date.now()-7*24*60*60*1e3,r=[];Object.entries(e).forEach(([t,n])=>{typeof n=="object"&&n.timestamp&&n.timestamp<a&&r.push(t)}),r.length>0&&(await chrome.storage.local.remove(r),console.log(`Limpeza concluída: ${r.length} itens removidos`))}catch(e){console.error("Erro na limpeza de dados:",e)}}}console.log("Criando instância do BackgroundService");const l=new c;chrome.alarms.create("cleanup",{periodInMinutes:24*60});chrome.alarms.onAlarm.addListener(s=>{s.name==="cleanup"&&l.cleanupOldData()});console.log("Background script configurado completamente");
